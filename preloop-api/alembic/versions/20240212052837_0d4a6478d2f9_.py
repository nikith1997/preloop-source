"""empty message

Revision ID: 0d4a6478d2f9
Revises: 
Create Date: 2024-02-12 05:28:37.843023

"""
from typing import Sequence, Union

import fastapi_users_db_sqlalchemy
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0d4a6478d2f9"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "org_user",
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("org_id", sa.UUID(), nullable=False),
        sa.Column("org_name", sa.String(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_org_user_email"), "org_user", ["email"], unique=True)
    op.create_table(
        "user",
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column(
            "org_id",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("org_name", sa.String(), nullable=False),
        sa.Column("id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_table(
        "accesstoken",
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False
        ),
        sa.Column("token", sa.String(length=43), nullable=False),
        sa.Column(
            "created_at",
            fastapi_users_db_sqlalchemy.generics.TIMESTAMPAware(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("token"),
    )
    op.create_index(
        op.f("ix_accesstoken_created_at"), "accesstoken", ["created_at"], unique=False
    )
    op.create_table(
        "orgaccesstoken",
        sa.Column(
            "user_id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False
        ),
        sa.Column("token", sa.String(length=43), nullable=False),
        sa.Column(
            "created_at",
            fastapi_users_db_sqlalchemy.generics.TIMESTAMPAware(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["user_id"], ["org_user.id"], ondelete="cascade"),
        sa.PrimaryKeyConstraint("token"),
    )
    op.create_index(
        op.f("ix_orgaccesstoken_created_at"),
        "orgaccesstoken",
        ["created_at"],
        unique=False,
    )
    op.create_table(
        "all_users",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("org_id", sa.UUID(), nullable=False),
        sa.Column("simple_org_id", sa.String(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("user_id", name=op.f("all_users_pkey")),
    )
    op.create_table(
        "datasource",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("datasource_name_script", sa.String(), nullable=False),
        sa.Column("datasource_name_generic", sa.String(), nullable=False),
        sa.Column("datasource_description", sa.String(), nullable=True),
        sa.Column(
            "connection_details",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column("datasource_type", sa.String(), nullable=False),
        sa.Column(
            "datasource_details",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=False,
        ),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("last_updated", sa.DateTime(), nullable=True),
        sa.Column("hashed_value", sa.String(), nullable=True),
        sa.Column(
            "execution_id",
            sa.UUID(),
            server_default="453b0274-4a6a-498f-a661-a83e3172b323",
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["all_users.user_id"],
            name=op.f("datasource_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("datasource_pkey")),
    )
    op.create_table(
        "executions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "record_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("reason", sa.String(), nullable=True),
        sa.Column("execution_type", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["all_users.user_id"],
            name=op.f("executions_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("executions_pkey")),
    )
    op.create_table(
        "feature",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("datasource_ids", postgresql.ARRAY(sa.String()), nullable=False),
        sa.Column("feature_name_script", sa.String(), nullable=False),
        sa.Column("feature_name_generic", sa.String(), nullable=False),
        sa.Column("feature_description", sa.String(), nullable=False),
        sa.Column(
            "column_types", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("feature_dest", sa.String(), nullable=False),
        sa.Column("feature_cols", postgresql.ARRAY(sa.String()), nullable=False),
        sa.Column(
            "feature_signature", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("id_cols", postgresql.ARRAY(sa.String()), nullable=False),
        sa.Column("target_cols", postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("last_updated", sa.DateTime(), nullable=True),
        sa.Column("scheduling_expression_string", sa.String(), nullable=True),
        sa.Column("creation_method", sa.String(), nullable=False),
        sa.Column("script_loc", sa.String(), nullable=False),
        sa.Column("versioning", sa.Boolean(), nullable=False),
        sa.Column("latest_version", sa.Integer(), nullable=False),
        sa.Column("location_string", sa.String(), nullable=True),
        sa.Column("feature_drift_enabled", sa.Boolean(), nullable=False),
        sa.Column(
            "execution_id",
            sa.UUID(),
            server_default="453b0274-4a6a-498f-a661-a83e3172b323",
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["all_users.user_id"],
            name=op.f("feature_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("feature_pkey")),
    )
    op.create_table(
        "ml_model",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("ml_model_name", sa.String(), nullable=False),
        sa.Column("ml_model_description", sa.String(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("last_updated", sa.DateTime(), nullable=True),
        sa.Column("ml_object_dir", sa.String(), nullable=True),
        sa.Column("script_dir", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("reason", sa.String(), nullable=True),
        sa.Column("endpoint_url", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["all_users.user_id"],
            name=op.f("ml_model_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("ml_model_pkey")),
    )
    op.create_table(
        "organizations",
        sa.Column("org_id", sa.UUID(), nullable=False),
        sa.Column("org_name", sa.String(), nullable=False),
        sa.Column("org_owner", sa.UUID(), nullable=False),
        sa.Column("simple_org_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["org_owner"],
            ["all_users.user_id"],
            name=op.f("organizations_org_owner_fkey"),
        ),
        sa.PrimaryKeyConstraint("org_id", name=op.f("organizations_pkey")),
        sa.UniqueConstraint(
            "simple_org_id", name=op.f("organizations_simple_org_id_key")
        ),
    )
    op.create_table(
        "api_keys",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("org_id", sa.UUID(), nullable=False),
        sa.Column("role", sa.String(), nullable=False),
        sa.Column("key_id", sa.String(), nullable=False),
        sa.Column("hashed_secret", sa.String(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("visibility", sa.String(), nullable=False),
        sa.Column("encrypted_secret", sa.LargeBinary(), nullable=True),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organizations.org_id"],
            name=op.f("api_keys_org_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["all_users.user_id"],
            name=op.f("api_keys_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("key_id", name=op.f("api_keys_pkey")),
    )
    op.create_table(
        "feature_drift",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("feature_id", sa.UUID(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("drifts", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "record_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["feature_id"],
            ["feature.id"],
            name=op.f("feature_drift_feature_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("feature_drift_pkey")),
    )
    op.create_table(
        "feature_versions",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("feature_id", sa.UUID(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["feature_id"],
            ["feature.id"],
            name=op.f("feature_versions_feature_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("feature_versions_pkey")),
    )
    op.create_table(
        "ml_model_training_jobs",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("ml_model_id", sa.UUID(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("reason", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["ml_model_id"],
            ["ml_model.id"],
            name=op.f("ml_model_training_jobs_ml_model_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["all_users.user_id"],
            name=op.f("ml_model_training_jobs_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("ml_model_training_jobs_pkey")),
    )
    op.create_table(
        "ml_model_versions",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["model_id"],
            ["ml_model.id"],
            name=op.f("ml_model_versions_model_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("ml_model_versions_pkey")),
    )
    op.create_table(
        "org_load_balancers",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("org_id", sa.UUID(), nullable=False),
        sa.Column("load_balancer_arn", sa.String(), nullable=False),
        sa.Column("listener_arn", sa.String(), nullable=True),
        sa.Column("url", sa.String(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("num_target_groups", sa.Integer(), nullable=False),
        sa.Column(
            "route_53_record", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("security_group_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organizations.org_id"],
            name=op.f("org_load_balancers_org_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("org_load_balancers_pkey")),
    )
    op.create_table(
        "team",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("org_id", sa.UUID(), nullable=False),
        sa.Column("team_name", sa.String(), nullable=False),
        sa.Column("team_description", sa.String(), nullable=False),
        sa.Column("team_owner", sa.UUID(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("last_updated", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["org_id"],
            ["organizations.org_id"],
            name=op.f("team_org_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["team_owner"], ["all_users.user_id"], name=op.f("team_team_owner_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("team_pkey")),
    )
    op.create_table(
        "hosted_ml_models",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("ml_model_id", sa.UUID(), nullable=False),
        sa.Column("load_balancer_id", sa.UUID(), nullable=True),
        sa.Column("target_group_arn", sa.String(), nullable=True),
        sa.Column("listener_rule_arn", sa.String(), nullable=True),
        sa.Column("ecs_cluster_name", sa.String(), nullable=True),
        sa.Column("ecs_service_name", sa.String(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("task_security_group_id", sa.String(), nullable=True),
        sa.Column("task_definition_arn", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["load_balancer_id"],
            ["org_load_balancers.id"],
            name=op.f("hosted_ml_models_load_balancer_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["ml_model_id"],
            ["ml_model.id"],
            name=op.f("hosted_ml_models_ml_model_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("hosted_ml_models_pkey")),
    )
    op.create_table(
        "team_member",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("team_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("team_role", sa.String(), nullable=False),
        sa.Column(
            "member_from",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("is_accepted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["team_id"], ["team.id"], name=op.f("team_member_team_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["all_users.user_id"],
            name=op.f("team_member_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("team_member_pkey")),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("team_member")
    op.drop_table("hosted_ml_models")
    op.drop_table("team")
    op.drop_table("org_load_balancers")
    op.drop_table("ml_model_versions")
    op.drop_table("ml_model_training_jobs")
    op.drop_table("feature_versions")
    op.drop_table("feature_drift")
    op.drop_table("api_keys")
    op.drop_table("organizations")
    op.drop_table("ml_model")
    op.drop_table("feature")
    op.drop_table("executions")
    op.drop_table("datasource")
    op.drop_table("all_users")
    op.drop_index(op.f("ix_orgaccesstoken_created_at"), table_name="orgaccesstoken")
    op.drop_table("orgaccesstoken")
    op.drop_index(op.f("ix_accesstoken_created_at"), table_name="accesstoken")
    op.drop_table("accesstoken")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_org_user_email"), table_name="org_user")
    op.drop_table("org_user")
    # ### end Alembic commands ###
