name: 'Create a Release'
description: 'Creates a new release based on the latest version of the package'

inputs:
  package_version:
    description: 'The version of the package that was published'
    type: string
  gh_bot_token:
    description: 'Token used to create a new release'
    required: true
    type: string
outputs:
  package_version:
    description: 'The version of the package that was published'
    value: ${{ inputs.package_version }}
runs:
  using: "composite"
  steps:

    - name: Tag the repository
      env:
        GITHUB_TOKEN: ${{ inputs.gh_bot_token }}
      run: |
        git config --global user.name preloop-bot
        git config --global user.email githubbot@preloop.com
        git tag -a ${{ inputs.package_version }} -m "Release ${{ inputs.package_version }}"
        git push origin tag ${{ inputs.package_version }}
      shell: bash

    - name: Add tag to ENV context
      run: "echo \"RELEASE_TAG=${{ inputs.package_version }}\" >> $GITHUB_ENV"
      shell: bash

    - name: "Create release"
      uses: "actions/github-script@v6.4.0"
      env:
        GITHUB_TOKEN: ${{ inputs.gh_bot_token }}
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          if (!process.env.RELEASE_TAG) {
            core.setFailed("The environment variable RELEASE_TAG is not defined.")

            return;
          }

          try {
            const response = await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: process.env.RELEASE_TAG,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.RELEASE_TAG,
            });

            core.exportVariable('RELEASE_ID', response.data.id);
            core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
          } catch (error) {
            core.setFailed(error.message);
          }
