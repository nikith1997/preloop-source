name: "Deploy Infrastructure"
on:
  push:
    branches:
      - master

jobs:
  deploy-to-dev:
    runs-on: ubuntu-latest
    env:
      CDK_DEFAULT_ACCOUNT: 439101250057
      CDK_DEFAULT_REGION: us-east-1
      STATE_MACHINE_ARN: arn:aws:states:us-east-1:439101250057:stateMachine:ExecutionEngineStateMachine
      CDK_DEPLOY_ENVIRONMENT: dev
    environment: development
    permissions:
      contents: "read"
      id-token: "write"
    outputs:
      deployment-version: ${{ steps.deployment-version.outputs.PACKAGE_VERSION }}
    steps:
      - uses: actions/checkout@v3
      - uses: preloop/devops/.github/actions/setup-python-and-poetry@master
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: "Install dependencies"
        run: |
          poetry install
          npm install -g aws-cdk
      
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-east-1" # change to appropriate region
          role-to-assume: "arn:aws:iam::439101250057:role/github-actions-dev-role"
          role-session-name: "RepoPublishPackage"
          role-duration-seconds: 1800

      - name: Synth and Deploy Stage 1 of Stack
        run: |
          cdk synth CoreInfra --exclusively
          cdk deploy --require-approval never CoreInfra

      - name: Make a Directory for Execution Engine Repo
        run: mkdir execution-image-repo

      - name: Checkout execution-engine repo
        uses: actions/checkout@v4
        with:
          repository: preloop/execution-engine
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: execution-image-repo
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Execution Engine Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-execution-engine
          IMAGE_TAG: latest
          CODEARTIFACT_DOMAIN_NAME: preloop-artifactory-dev
          PRELOOP_API_ENDPOINT: http://internal-BackEn-BackE-9BBP4oxxZLpS-305300445.us-east-1.elb.amazonaws.com
        run: |
          cd execution-image-repo
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN_NAME --domain-owner $CDK_DEFAULT_ACCOUNT --query authorizationToken --output text)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg DEPLOY_ENVIRONMENT=$CDK_DEPLOY_ENVIRONMENT \
          --build-arg AWS_DEFAULT_REGION=$CDK_DEFAULT_REGION \
          --build-arg AWS_ACCOUNT_ID=$CDK_DEFAULT_ACCOUNT \
          --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
          --build-arg PRELOOP_API_ENDPOINT=$PRELOOP_API_ENDPOINT .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Make a Directory for Execution Engine Lambda Repo
        run: mkdir execution-image-lambda-repo

      - name: Checkout execution-engine-lambda repo
        uses: actions/checkout@v4
        with:
          repository: preloop/execution-engine-lambda
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: execution-image-lambda-repo

      - name: Build and Push Image for Execution Engine Lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-execution-engine-lambda
          IMAGE_TAG: latest
          CODEARTIFACT_DOMAIN_NAME: preloop-artifactory-dev
          PRELOOP_API_ENDPOINT: http://internal-BackEn-BackE-9BBP4oxxZLpS-305300445.us-east-1.elb.amazonaws.com
        run: |
          cd execution-image-lambda-repo
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN_NAME --domain-owner $CDK_DEFAULT_ACCOUNT --query authorizationToken --output text)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg DEPLOY_ENVIRONMENT=$CDK_DEPLOY_ENVIRONMENT \
          --build-arg AWS_DEFAULT_REGION=$CDK_DEFAULT_REGION \
          --build-arg AWS_ACCOUNT_ID=$CDK_DEFAULT_ACCOUNT \
          --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
          --build-arg STATE_MACHINE_ARN_BUILD=${STATE_MACHINE_ARN} \
          --build-arg PRELOOP_API_ENDPOINT=$PRELOOP_API_ENDPOINT .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Make a Directory for Preloop Emailer Lambda Repo
        run: mkdir preloop-emailer-lambda

      - name: Checkout preloop-emailer-lambda repo
        uses: actions/checkout@v4
        with:
          repository: preloop/emailer-lambda
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: preloop-emailer-lambda

      - name: Build and Push Image for Preloop Emailer Lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-emailer-lambda
          IMAGE_TAG: latest
        run: |
          cd preloop-emailer-lambda
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      - name: Synth and Deploy Stage 2 of Stack
        run: |
          cdk synth CoreExecutionEngine --exclusively
          cdk deploy --require-approval never CoreExecutionEngine

      - name: Make a directory for Preloop Backend Repo
        run: mkdir preloop-backend-repo
      
      - name: Checkout preloop-backend repo
        uses: actions/checkout@v4
        with:
          repository: preloop/preloop-api
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: preloop-backend-repo
      
      - name: Build and Push Image for Preloop Backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-backend
          IMAGE_TAG: latest
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_URL_ASYNC: ${{ secrets.DATABASE_URL_ASYNC }}
          PRELOOP_DATASTORE_URL: ${{ secrets.PRELOOP_DATASTORE_URL }}
          CODEARTIFACT_DOMAIN_NAME: preloop-artifactory-dev
        run: |
          cd preloop-backend-repo
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN_NAME --domain-owner $CDK_DEFAULT_ACCOUNT --query authorizationToken --output text)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --build-arg DATABASE_URL=$DATABASE_URL \
          --build-arg DATABASE_URL_ASYNC=$DATABASE_URL_ASYNC \
          --build-arg PRELOOP_DATASTORE_URL=$PRELOOP_DATASTORE_URL \
          --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
          --build-arg DEPLOY_ENVIRONMENT=$CDK_DEPLOY_ENVIRONMENT \
          --build-arg AWS_DEFAULT_REGION=$CDK_DEFAULT_REGION \
          --build-arg AWS_ACCOUNT_ID=$CDK_DEFAULT_ACCOUNT .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Make a directory for Preloop Frontend Repo
        run: mkdir preloop-frontend-repo

      - name: Checkout preloop-frontend repo
        uses: actions/checkout@v4
        with:
          repository: preloop/frontend
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: preloop-frontend-repo

      - name: Build and Push Image for Preloop Frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-frontend
          IMAGE_TAG: ${{ github.sha }}
          NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
          API_URL: ${{ vars.API_URL }}
          NEXT_PUBLIC_POSTHOG_KEY: ${{ vars.NEXT_PUBLIC_POSTHOG_KEY }}
          NEXT_PUBLIC_POSTHOG_HOST: ${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}
        run: |
          cd preloop-frontend-repo
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL --build-arg API_URL=$API_URL --build-arg NEXT_PUBLIC_POSTHOG_KEY=$NEXT_PUBLIC_POSTHOG_KEY --build-arg NEXT_PUBLIC_POSTHOG_HOST=$NEXT_PUBLIC_POSTHOG_HOST .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Synth and Deploy Stage 3 of Stack
        run: |
          cdk synth BackEndAPI --exclusively
          cdk deploy --require-approval never BackEndAPI

      - name: Synth and Deploy Stage 4 of Stack
        run: |
          cdk synth PreloopPublicApi --exclusively
          cdk deploy --require-approval never PreloopPublicApi

      - name: Synth and Deploy Stage 5 of Stack
        run: |
          cdk synth Emailer --exclusively
          cdk deploy --require-approval never Emailer

      - name: Synth and Deploy Stage 6 of Stack
        run: |
          cdk synth FrontEnd --exclusively
          cdk deploy --require-approval never FrontEnd

      - name: Synth and Deploy Stage 7 of Stack
        run: |
          cdk synth ModelInferenceEngine --exclusively
          cdk deploy --require-approval never ModelInferenceEngine
      
      - name: Synth and Deploy Post Process Stage of Stack
        run: |
          cdk synth PostProcessTasks --exclusively
          cdk deploy --require-approval never PostProcessTasks

      - name: Get Deployment Version
        id: deployment-version
        run: echo "PACKAGE_VERSION=$(poetry version --short)" >> "$GITHUB_OUTPUT"
        working-directory: .
        shell: bash

  create-release:
    runs-on: ubuntu-latest
    needs: [deploy-to-dev]
    permissions:
      contents: "write"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3
      - uses: preloop/devops/.github/actions/create-release@master
        with:
          gh_bot_token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          package_version: ${{ needs.deploy-to-dev.outputs.deployment-version }}
  
  deploy-to-prod:
    runs-on: ubuntu-latest
    env:
      CDK_DEFAULT_ACCOUNT: 695168008693
      CDK_DEFAULT_REGION: us-east-1
      STATE_MACHINE_ARN: arn:aws:states:us-east-1:695168008693:stateMachine:ExecutionEngineStateMachine
      CDK_DEPLOY_ENVIRONMENT: prod
    needs: [create-release]
    environment: production
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3
      - uses: preloop/devops/.github/actions/setup-python-and-poetry@master
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      
      - name: "Install dependencies"
        run: |
          poetry install
          npm install -g aws-cdk
      
      - name: "Configure AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-east-1" # change to appropriate region
          role-to-assume: "arn:aws:iam::695168008693:role/github-actions-prod-role"
          role-session-name: "RepoPublishPackage"
          role-duration-seconds: 1800

      - name: Synth and Deploy Stage 1 of Stack to Production
        run: |
          cdk synth CoreInfra --exclusively
          cdk deploy --require-approval never CoreInfra --exclusively
      
      - name: Make a Directory for Execution Engine Repo
        run: mkdir execution-image-repo

      - name: Checkout execution-engine repo
        uses: actions/checkout@v4
        with:
          repository: preloop/execution-engine
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: execution-image-repo
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Execution Engine Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-execution-engine
          IMAGE_TAG: latest
          CODEARTIFACT_DOMAIN_NAME: preloop-artifactory-prod
          PRELOOP_API_ENDPOINT: http://internal-BackEn-BackE-UYcz94GdC4wa-1418473385.us-east-1.elb.amazonaws.com
        run: |
          cd execution-image-repo
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN_NAME --domain-owner $CDK_DEFAULT_ACCOUNT --query authorizationToken --output text)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg DEPLOY_ENVIRONMENT=$CDK_DEPLOY_ENVIRONMENT \
          --build-arg AWS_DEFAULT_REGION=$CDK_DEFAULT_REGION \
          --build-arg AWS_ACCOUNT_ID=$CDK_DEFAULT_ACCOUNT \
          --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
          --build-arg PRELOOP_API_ENDPOINT=$PRELOOP_API_ENDPOINT .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Make a Directory for Execution Engine Lambda Repo
        run: mkdir execution-image-lambda-repo

      - name: Checkout execution-engine repo
        uses: actions/checkout@v4
        with:
          repository: preloop/execution-engine-lambda
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: execution-image-lambda-repo

      - name: Build and Push Execution Engine Lambda Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-execution-engine-lambda
          IMAGE_TAG: latest
          CODEARTIFACT_DOMAIN_NAME: preloop-artifactory-prod
          PRELOOP_API_ENDPOINT: http://internal-BackEn-BackE-UYcz94GdC4wa-1418473385.us-east-1.elb.amazonaws.com
        run: |
          cd execution-image-lambda-repo
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN_NAME --domain-owner $CDK_DEFAULT_ACCOUNT --query authorizationToken --output text)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --build-arg DEPLOY_ENVIRONMENT=$CDK_DEPLOY_ENVIRONMENT \
          --build-arg AWS_DEFAULT_REGION=$CDK_DEFAULT_REGION \
          --build-arg AWS_ACCOUNT_ID=$CDK_DEFAULT_ACCOUNT \
          --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
          --build-arg STATE_MACHINE_ARN_BUILD=${STATE_MACHINE_ARN} \
          --build-arg PRELOOP_API_ENDPOINT=$PRELOOP_API_ENDPOINT .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Make a Directory for Preloop Emailer Lambda Repo
        run: mkdir preloop-emailer-lambda

      - name: Checkout preloop-emailer-lambda repo
        uses: actions/checkout@v4
        with:
          repository: preloop/emailer-lambda
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: preloop-emailer-lambda

      - name: Build and Push Image for Preloop Emailer Lambda
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-emailer-lambda
          IMAGE_TAG: latest
        run: |
          cd preloop-emailer-lambda
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Synth and Deploy Stage 2 of Stack to Production
        run: |
          cdk synth CoreExecutionEngine --exclusively
          cdk deploy --require-approval never CoreExecutionEngine
      
      - name: Make a Directory for Preloop Backend Repo
        run: mkdir preloop-backend-repo
      
      - name: Checkout preloop-backend repo
        uses: actions/checkout@v4
        with:
          repository: preloop/preloop-api
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: preloop-backend-repo
      
      - name: Build and Push Image for Preloop Backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-backend
          IMAGE_TAG: latest
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_URL_ASYNC: ${{ secrets.DATABASE_URL_ASYNC }}
          PRELOOP_DATASTORE_URL: ${{ secrets.PRELOOP_DATASTORE_URL }}
          CODEARTIFACT_DOMAIN_NAME: preloop-artifactory-prod
        run: |
          cd preloop-backend-repo
          export CODEARTIFACT_AUTH_TOKEN=$(aws codeartifact get-authorization-token --domain $CODEARTIFACT_DOMAIN_NAME --domain-owner $CDK_DEFAULT_ACCOUNT --query authorizationToken --output text)
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --build-arg DATABASE_URL=$DATABASE_URL \
          --build-arg DATABASE_URL_ASYNC=$DATABASE_URL_ASYNC \
          --build-arg PRELOOP_DATASTORE_URL=$PRELOOP_DATASTORE_URL \
          --build-arg CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN \
          --build-arg DEPLOY_ENVIRONMENT=$CDK_DEPLOY_ENVIRONMENT \
          --build-arg AWS_DEFAULT_REGION=$CDK_DEFAULT_REGION \
          --build-arg AWS_ACCOUNT_ID=$CDK_DEFAULT_ACCOUNT .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Make a directory for Preloop Frontend Repo
        run: mkdir preloop-frontend-repo

      - name: Checkout preloop-frontend repo
        uses: actions/checkout@v4
        with:
          repository: preloop/frontend
          ref: master
          token: ${{ secrets.PRELOOP_BOT_TOKEN }}
          path: preloop-frontend-repo

      - name: Build and Push Image for Preloop Frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: preloop-frontend
          IMAGE_TAG: ${{ github.sha }}
          NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL }}
          API_URL: ${{ vars.API_URL }}
          NEXT_PUBLIC_POSTHOG_KEY: ${{ vars.NEXT_PUBLIC_POSTHOG_KEY }}
          NEXT_PUBLIC_POSTHOG_HOST: ${{ vars.NEXT_PUBLIC_POSTHOG_HOST }}
        run: |
          cd preloop-frontend-repo
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL --build-arg API_URL=$API_URL --build-arg NEXT_PUBLIC_POSTHOG_KEY=$NEXT_PUBLIC_POSTHOG_KEY --build-arg NEXT_PUBLIC_POSTHOG_HOST=$NEXT_PUBLIC_POSTHOG_HOST .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Synth and Deploy Stage 3 of Stack
        run: |
          cdk synth BackEndAPI --exclusively
          cdk deploy --require-approval never BackEndAPI

      - name: Synth and Deploy Stage 4 of Stack
        run: |
          cdk synth BackendCertificates --exclusively
          cdk deploy --require-approval never BackendCertificates

      - name: Synth and Deploy Stage 5 of Stack
        run: |
          cdk synth PreloopPublicApi --exclusively
          cdk deploy --require-approval never PreloopPublicApi

      - name: Synth and Deploy Stage 6 of Stack
        run: |
          cdk synth Emailer --exclusively
          cdk deploy --require-approval never Emailer

      - name: Synth and Deploy Stage 7 of Stack
        run: |
          cdk synth FrontEnd --exclusively
          cdk deploy --require-approval never FrontEnd

      - name: Synth and Deploy Stage 8 of Stack
        run: |
          cdk synth ModelEndpoint --exclusively
          cdk deploy --require-approval never ModelEndpoint

      - name: Synth and Deploy Stage 9 of Stack
        run: |
          cdk synth ModelInferenceEngine --exclusively
          cdk deploy --require-approval never ModelInferenceEngine
      
      - name: Synth and Deploy Post Process Stage of Stack
        run: |
          cdk synth PostProcessTasks --exclusively
          cdk deploy --require-approval never PostProcessTasks
